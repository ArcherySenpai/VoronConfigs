# https://github.com/rkolbi/voron2.4/tree/main/MY_V24-350

[gcode_macro configvars]
#------------------------------------------------- EUCLID PROBE -------------------------------------------------- 
variable_EuclidX: 52                   # X Position directly over probe
variable_EuclidY: 332.50               # Y Position directly over probe
variable_EuclidSwipeX: 100             # X Position, swipe to the side to free probe of dock
variable_EuclidSafeDeployZ: 25         # Z Safe height for deployment approach
variable_EuclidSafeStowZ: 30           # Z Safe height following stowing the probe (break mag pull)
variable_EuclidDeployZ: 2.0            # Lower to just above probe, no physical contact
variable_EuclidStowZ: 1.35             # Lower to exact postion for dock entry/exit

#------------------------------------------------ Z COMPENSATION ------------------------------------------------- 
variable_EuclidZCompensation: 9.3    # Z0 Compensation based off probe height, used in G3201. 0 to disable.
                                       # G3201 Description and usage below, ~line 110

variable_ProbeBoundingBox: 20          # Bounding box size to take probe samples, this is used for X & Y
variable_DoApplyMesh: True             # Apply mesh prior to probe sampling, for Z Compensation
variable_MeshToApply: "NONE"        # The saved mesh to apply, mesh name must be enclosed with "". The bundled HOTMESH
                                       # macro will save it's results as "HOTMESH"
                                       # *!* To perform a fresh in-situation mesh calibration, instead of loading a saved
                                       # mesh, use "INSITU" for MeshToApply. This will be applied before Z Comp probing.
                                       # *!* To completely skip applying mesh, use "NONE" for MeshToApply

variable_ZprobeSpeed: 5.0              # Probing speed for Z Measurements
variable_ZprobeSamples: 7              # Samples probed per position, yeilding as calculated median. Keep this number odd e.g. 3,5,7...
variable_ZprobeTolerance: 0.050        # Sample Tolerance per Z Point
variable_ZprobeAbortTolerance: 1.0     # Tolerance to apply the Measured Z-0 Point or throw an error to check things
variable_ZprobeRetract: 1.5            # Retract from each probing for a D2F-5 1.2 should be good         

#----------------------------------------------- PRESSURE ADVANCE ------------------------------------------------ 
variable_PressureAdvance: 0.055        # Pressure Advance
variable_PressureAdvanceST: 0.040      # Pressure Advance Smooth Time (original 0.030), changed to 0.04 per voron docs

#------------------------------------------------- RETRACTIONS --------------------------------------------------- 
variable_PurgeRetract: 0.1             # After completing purgeline, how much retraction to perform (Not normally needed)
variable_EndRetract: 2.0               # After print has completed, how much retraction to perform

#---------------------------------------------- HEATSOAK & COOLING -----------------------------------------------
variable_QGLbeforeSoakMesh: True       # (True/False) Perfrom QGL before applying heat soak for HOTMESH
variable_QGLbeforeSoakPrint: True      # (True/False) Perfrom QGL before applying heat soak for PRINT
variable_HotmeshSoakMinutes: 1        # Minutes to heat-soak prior to running mesh
variable_PrePrintSoakMinutes: 1       # Minutes to heat-soak prior to printing
variable_InsituMeshSoakMinutes: 10     # Minutes to heat-soak prior to performing an insitu mesh (in addition to PrePrintSoak)
variable_PostPrintCool: 1              # Post-Print cooling to prevent nozzle string, minutes of cooling
variable_PostPrintParkCool: 2          # Once parks, minutes of cooling

#------------------------------------------- PRINTING MOTOR CURRENTS --------------------------------------------- 
variable_PrintCurrentXY: 1.0           # Steppermotor current to be used while printing
variable_PrintCurrentZ: 0.8            # Steppermotor current to be used while printing

#--------------------------------------------- DEFAULT TEMPERATURES ---------------------------------------------- 
variable_defaultTempNozzle: 240        # The default Nozzle Extruding temperature if none is specified
variable_defaultWarmNozzle: 185        # The default Nozzle Warming temperature if none is specified
variable_defaultTempBed: 110           # The default Bed temperature if none is specified

gcode:


[include configs/*.cfg]

[respond]
default_type: echo

[force_move]
enable_force_move: true

[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_310012001550324E31333220-if00
restart_method: command
##--------------------------------------------------------------------

[printer]
kinematics: corexy
max_velocity: 500  
max_accel: 10000
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR0
##  Endstop connected to DIAG0
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 200 for 1.8 degree stepper
endstop_pin: PG6
position_min: 0
##--------------------------------------------------------------------

##  Uncomment for 350mm build
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
homing_speed: 35   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  A Stepper - Right
##  Connected to MOTOR1
##  Endstop connected to DIAG1
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 200 for 1.8 degree stepper
endstop_pin: PG9
position_min: 0
##--------------------------------------------------------------------

##  Uncomment for 350mm build
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
homing_speed: 35  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
 
#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR2_1
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
endstop_pin: PG10
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: -0.5
##--------------------------------------------------------------------

##  Uncomment below for 350mm build
position_max: 310

##--------------------------------------------------------------------
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999

##  Z1 Stepper - Rear Left
##  Connected to MOTOR3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999

##  Z2 Stepper - Rear Right
##  Connected to MOTOR4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999

##  Z3 Stepper - Front Right
##  Connected to MOTOR5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999


#####################################################################
#   Extruder
#####################################################################

##  Connected to MOTOR_6
##  Heater - HE0
##  Thermistor - T0
[extruder]
step_pin: PE2
dir_pin: !PE3
enable_pin: !PD4
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
#Original
#rotation_distance: 22.6789511   #Bondtech 5mm Drive Gears
#Mine
rotation_distance: 22.905740611   #Bondtech 5mm Drive Gears

##  Update Gear Ratio depending on your Extruder Type
##  Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##  Use 80:20 for M4, M3.1
gear_ratio: 50:17               #BMG Gear Ratio
microsteps: 32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: PA2
##  Validate the following thermistor type to make sure it is correct
##  See https://www.klipper3d.org/Config_Reference.html#common-thermistors for additional options
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PF4
min_temp: 0
max_temp: 270
max_power: 1.0
min_extrude_temp: 170
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
##  Try to keep pressure_advance below 1.0
#pressure_advance: 0.05
##  Default is 0.040, leave stock
#pressure_advance_smooth_time: 0.040

##  E0 on MOTOR6
##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]
uart_pin: PE1
interpolate: false
run_current: 0.5
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
#   Bed Heater
#####################################################################

[heater_bed]
##  SSR Pin - HE1
##  Thermistor - TB
heater_pin: PA1
##  Validate the following thermistor type to make sure it is correct
##  Keenovo branded bed heaters should use Generic 3950
##  LDO branded bed heaters will have the sensor type labelled on the heater
##  See https://www.klipper3d.org/Config_Reference.html#common-thermistors for additional options
sensor_type: Generic 3950 
sensor_pin: PF3
##  Adjust Max Power so your heater doesn't warp your bed. Rule of thumb is 0.4 watts / cm^2 .
max_power: 0.6
min_temp: 0
max_temp: 120
pwm_cycle_time: 0.0166
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
#   Probe
#####################################################################

[probe]
##  Inductive Probe - DIAG7
##  This probe is not used for Z height, only Quad Gantry Leveling
pin: PG15
x_offset: 0
y_offset: 25.0
#ORG z_offset: 0
#EUCLID
z_offset: 10
#ORG speed: 10.0
#EUCLID
speed: 5.0
# Added for euclid, remove for induction
lift_speed: 30

samples: 5

samples_result: median
#
sample_retract_dist: 1.5
#original samples_tolerance: 0.006
#EUCLID
samples_tolerance: 0.0075
#my testing
#samples_tolerance: 0.04
samples_tolerance_retries: 3


#####################################################################
#   Fan Control
#####################################################################

[fan]
##  Print Cooling Fan - CNC_FAN0
pin: PA8
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10

[heater_fan hotend_fan]
##  Hotend Fan - CNC_FAN1
pin: PE5
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[controller_fan controller_fan]
##  Controller fan - CNC_FAN2
pin: PD12
kick_start_time: 0.5
heater: heater_bed
fan_speed: 0.5

#[heater_fan exhaust_fan]
##  Exhaust fan - CNC_FAN3
#pin: PD13
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

#####################################################################
#   LED Control
#####################################################################

[output_pin caselight]
## Chamber Lighting - CNC_FAN5
pin: PD15
pwm:true
shutdown_value: 0
value:0
cycle_time: 0.01

#####################################################################
#   Additional Sensors
#####################################################################

[thermistor CMFB103F3950FANT]
temperature1: 0.0
resistance1: 32116.0
temperature2: 40.0
resistance2: 5309.0
temperature3: 80.0
resistance3: 1228.0

[temperature_sensor chamber_temp]
## Chamber Temperature - T1
sensor_type: CMFB103F3950FANT
sensor_pin: PF5
min_temp: 0
max_temp: 100
gcode_id: chamber_th

#####################################################################
# 	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800
#timeout: 21600

[safe_z_home]
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
home_xy_position:231,350
speed:100
z_hop:10
z_hop_speed:10

[quad_gantry_level]
##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions

#--------------------------------------------------------------------
##  Gantry Corners for 350mm Build
##  Uncomment for 350mm build
gantry_corners:
   -60,-10
   410,420
##  Probe points
points:
   50,25
   50,275
   300,275
   300,25

#--------------------------------------------------------------------
speed: 100
horizontal_move_z: 15
retries: 5
retry_tolerance: 0.0075
max_adjust: 15

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################

[display]
#  mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel btt_mini12864]
#  To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0
color_order: RGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

#--------------------------------------------------------------------

# PRINT_START will home and the level the gantry*, perform a heat soak, then G3201, and lastly bring the hotend
# to temperature and execute a purge line from the front left across X-axis to check/verify easily. The purge
# line extrusion rate will be calculated by using the [nozzle_diameter] value. (*if value is True above)
#
# PRINT_END will raise by 10mm when the print has completed, then performs a cooling period by turning the fan
# fully on and then parks the toolhead at the top, front-right position. The parked Z position will be at least
# 75% of the max axis height or at the printed object's Z height + 10 - whichever is taller - this allows for
# easy visual inspection of the toolhead/nozzle (and a reminder to do so) and removal of any debris. Additionally
# to note, during PRINT_END or PRINT_START, the toolhead is placed back at Y20 to allow room for the fan(s) to
# pull air without being blocked by being pressed up against the doors. 

#####################################################################
#   Macros
#####################################################################

[delayed_gcode prerun]
initial_duration: 1
gcode:
    QUERY_PROBE
    M117 Printer online.
    {% for s in range(0, 30) %}
        SET_LED LED=nozzle INDEX=1 RED=1 GREEN=0 BLUE=1
        SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=.5 BLUE=.5
        G4 P100
        SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
        SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=1
        G4 P50
    {% endfor %}
    SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro configvars"].pressureadvance|float} SMOOTH_TIME={printer["gcode_macro configvars"].pressureadvancest|float}
    SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2



#.................................................................................................................
# M401 - Deploy Euclid Probe
[gcode_macro M401]
gcode:
    QUERY_PROBE
    {% if printer.probe.last_query %}
        M118 Fetching Euclid Probe.
        G28 Z
        _PROBE_DEPLOY
    {% else %}
        M118 ?!Probe is already attached.
    {% endif %}



#.................................................................................................................
# M402 - Stow Euclid Probe
[gcode_macro M402]
gcode:
    QUERY_PROBE
    {% if not printer.probe.last_query %}
        M118 Stowing Euclid Probe.
        G28 Z
        _PROBE_STOW
    {% else %}
        M118 ?!Probe is not attached.
    {% endif %}



#.................................................................................................................
# Euclid probe safety checks block

[gcode_macro _do_error_if_probe_deployed]
gcode:
    {% if not printer.probe.last_query %}
        {action_raise_error("ERROR: probe still deployed - remove and return to dock.")}
    {% else %}
        M118 Euclid Probe has been stowed.  
    {% endif %}	

[gcode_macro _error_if_probe_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    _do_error_if_probe_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode:
    {% if printer.probe.last_query %}
        {action_raise_error("ERROR: probe unsuccessfully deployed.")}
    {% else %}
        M118 Euclid Probe has been attached.
    {% endif %}

[gcode_macro _error_if_probe_not_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    _do_error_if_probe_not_deployed



#.................................................................................................................
[gcode_macro _PROBE_DEPLOY]
gcode:
    G90
    G0 Z{printer["gcode_macro configvars"].euclidsafedeployz|float} F800
    G0 X{printer["gcode_macro configvars"].euclidx|float} Y{printer["gcode_macro configvars"].euclidy|float} F3500
    G0 Z{printer["gcode_macro configvars"].eucliddeployz|float} F800
    G0 X{printer["gcode_macro configvars"].euclidswipex|float} Y{printer["gcode_macro configvars"].euclidy|float} F3500
    G0 Z{printer["gcode_macro configvars"].euclidsafedeployz|float} F800
    _error_if_probe_not_deployed ; Verify probe attached



#.................................................................................................................
[gcode_macro _PROBE_STOW]
gcode:
    G90
    G0 X{printer["gcode_macro configvars"].euclidswipex|float} Y{printer["gcode_macro configvars"].euclidy|float} F3500
    G0 Z{printer["gcode_macro configvars"].euclidstowz|float} F500
    G0 X{printer["gcode_macro configvars"].euclidx|float} Y{printer["gcode_macro configvars"].euclidy|float} F1000
    G0 Z{printer["gcode_macro configvars"].euclidsafestowz|float} F800
    _error_if_probe_deployed ; Verify probe detached



#.................................................................................................................
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_ORIGINIAL
gcode:
    QUERY_PROBE
    M401
    QUAD_GANTRY_LEVEL_ORIGINIAL
    M402



#.................................................................................................................
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIGINIAL
gcode:
    QUERY_PROBE
    M401
    BED_MESH_CALIBRATE_ORIGINIAL
    M402



#.................................................................................................................
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G0 Z30
    G28
    QUERY_PROBE
    {% if printer.probe.last_query %}
        M118 Fetching Euclid Probe.
        _PROBE_DEPLOY
    {% endif %}
    QUAD_GANTRY_LEVEL_ORIGINIAL
    G28
    M118 Stowing Euclid Probe.
    _PROBE_STOW
    QUERY_PROBE



#.................................................................................................................
[gcode_macro G3201]
gcode:
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set MeshToApply = printer["gcode_macro configvars"].meshtoapply|default() %}

    BED_MESH_CLEAR
    G28
    {% if MeshToApply == "INSITU" %}
        _INSITUMESH
    {% else %}
		QUERY_PROBE
		{% if printer.probe.last_query %}
			M118 Fetching Euclid Probe.
			_PROBE_DEPLOY
			G28 Z
		{% endif %}
		QUAD_GANTRY_LEVEL_ORIGINIAL
		{% if printer["gcode_macro configvars"].doapplymesh|default() == true and MeshToApply != "NONE" %}
			BED_MESH_PROFILE LOAD={MeshToApply}
			M118 Applying {MeshToApply} mesh prior to sampling.
		{% else %}
			M118 Not applying {MeshToApply} mesh prior to sampling.
		{% endif %}
    {% endif %}
    G28 Z
    G90
    G0 X{X_MID} Y{Y_MID} F3500
    G91  
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE1

[gcode_macro _CHECK_PROBE1]
gcode:
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X-{(ProbeBB/2)} Y-{(ProbeBB/2)} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE2 PASS={PROBE_PASS}

[gcode_macro _CHECK_PROBE2]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X{ProbeBB} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE3 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE3]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 Y{ProbeBB} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE4 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE4]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X-{ProbeBB} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE5 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE5]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    G90
    G0 Z25 F3500
    _CHECK_PROBE6 PASS={(PROBE_PASS + PASS)/5}

[gcode_macro _CHECK_PROBE6]
gcode:
    {% set ZP_CAL = printer["gcode_macro configvars"].euclidzcompensation|float %}
    {% set ZAbortTolerance = printer["gcode_macro configvars"].zprobeaborttolerance|float %}
    {% set MeshToApply = printer["gcode_macro configvars"].meshtoapply|default() %}
    {% set DoApplyMesh = printer["gcode_macro configvars"].doapplymesh|int %}
    {% set PASS = params.PASS|float %}
    {% set Z_POS = printer.toolhead.position.z|float %}
    {% set Z_OFFSET = PASS - ZP_CAL|float %}
    {% set NEW_CURRENT_Z = (Z_POS - Z_OFFSET) %}
    M118 Current Average is: {PASS}
    M118 Z-Probe calibration is: {ZP_CAL}
    M118 Offset: {Z_OFFSET}
    {% if Z_OFFSET|abs > ZAbortTolerance %}
        M118 ! ! !  Z-OFFSET is > {ZAbortTolerance}mm, check nozzle cleanliness and printer  ! ! !
        M118 Not applying calculated offset to Z.
      {% else %}
    M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
    SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
    G4 P1000
    M118 Moving nozzle to newly adjusted Z25.
    G0 Z25 F3500
    G4 P1000
      {% endif %}
    QUERY_PROBE
    {% if not printer.probe.last_query %}
        M118 Stowing Euclid Probe.
        _PROBE_STOW
    {% else %}
        M118 ?!Probe is not attached.
    {% endif %}
    {% if printer["gcode_macro configvars"].doapplymesh|default() == false and MeshToApply != "INSITU" and MeshToApply != "NONE" %}
        BED_MESH_PROFILE LOAD={MeshToApply}
        M118 Applied {MeshToApply} mesh post sampling.
    {% endif %}



#.................................................................................................................
[gcode_macro _PARK_TOOLHEAD]
gcode:
    {% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}  
    {% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
    {% set Z_POS = printer.toolhead.position.z + 10 %}
    M118 Parking toolhead.
    G90
    # park nozzle at top (at least 75% or Z max or Z + 10) front-right but allow room for hotend fan to pull air
    G0 X{X_MAX} Y20 Z{ [(Z_MAX*0.75), [Z_POS, Z_MAX]|min]|max } F3600 



#.................................................................................................................
[gcode_macro CURRENT_HIGH]
description: Raises stepper current for printing routine.
gcode:
    M117 Increased motor currents.
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro configvars"].printcurrentxy|float}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro configvars"].printcurrentxy|float}
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro configvars"].printcurrentz|float}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer["gcode_macro configvars"].printcurrentz|float}
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer["gcode_macro configvars"].printcurrentz|float}
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer["gcode_macro configvars"].printcurrentz|float}



#.................................................................................................................
[gcode_macro CURRENT_NORMAL]
description: Lowers stepper current for NON-printing routines, as set in [tmc2209 stepper_XX] above.
gcode:
    M117 Decreased motor currents.
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={ printer.configfile.config["tmc2209 stepper_x"]["run_current"] }
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={ printer.configfile.config["tmc2209 stepper_y"]["run_current"] }
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={ printer.configfile.config["tmc2209 stepper_z"]["run_current"] }
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={ printer.configfile.config["tmc2209 stepper_z1"]["run_current"] }
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={ printer.configfile.config["tmc2209 stepper_z2"]["run_current"] }
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={ printer.configfile.config["tmc2209 stepper_z3"]["run_current"] } 



#.................................................................................................................
[gcode_macro _HEAT_WAIT]
gcode:
    {% set MINUTES = params.MINUTES|default(12)|int %}
    {% for i in range(0, MINUTES) %}
        M117 Warming... {MINUTES-i} minute remaining.
        {% for s in range(0, 60) %}
            SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
            SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
            G4 P500
            SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
            SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
            G4 P500
        {% endfor %}
    {% endfor %}



#.................................................................................................................
[gcode_macro _COOL_WAIT]
gcode:
    M106 S250
    {% set MINUTES = params.MINUTES|default(1)|int %}
    {% for i in range(0, MINUTES) %}
        M117 Cooling... {MINUTES-i} minute remaining.
        {% for s in range(0, 60) %}
            SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=0
            SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
            G4 P500
            SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
            SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=0
            G4 P500
        {% endfor %}
    {% endfor %}
    M107



#.................................................................................................................
[gcode_macro HOTMESH]
gcode:
    CLEAR_PAUSE
    {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
        {action_respond_info("Cannot do that while printing")}
    {% else %}
        {% set defaultWN = printer["gcode_macro configvars"].defaultwarmnozzle|float %}
        {% set defaultTB = printer["gcode_macro configvars"].defaulttempbed|float %}
        {% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
        SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
        # Bring bed to full temperature, only warm hotend
        M140 S{BED_TEMP}
        M104 S{defaultWN} 
        G90 
        # Reset the G-Code Z offset
        SET_GCODE_OFFSET Z=0.0
        M117 Performing initial homing.
        {% if printer["gcode_macro configvars"].qglbeforesoakmesh|default() == true %}
            G32
            # Move the nozzle
            G1 X0 Y20 Z25 F3000
          {% else %}
            G28
            # Not moving the probe if QGL was not peroformed
        {% endif %}
        M117 Bringing bed to temperature.
        M190 S{BED_TEMP}
        _HEAT_WAIT MINUTES={printer["gcode_macro configvars"].hotmeshsoakminutes|float}
        SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
        M117 Performing hot level.
        CURRENT_HIGH
        M400
        M401
        QUAD_GANTRY_LEVEL_ORIGINIAL
        G28
        M117 Performing heated bed mesh calibration.
        BED_MESH_PROFILE REMOVE=HOTMESH
        BED_MESH_CALIBRATE_ORIGINIAL
        BED_MESH_PROFILE SAVE=HOTMESH
        BED_MESH_OUTPUT PGP=1
        M118 Bed mesh calibration completed.
        TURN_OFF_HEATERS
        CURRENT_NORMAL
        M402
        _PARK_TOOLHEAD
        M18 X Y E
        SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
        M117 Finished mesh.
        SAVE_CONFIG
    {% endif %}



#.................................................................................................................
[gcode_macro _INSITUMESH]
gcode:
        {% set defaultWN = printer["gcode_macro configvars"].defaultwarmnozzle|float %}
        {% set defaultTB = printer["gcode_macro configvars"].defaulttempbed|float %}
        {% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
        SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
        # Bring bed to full temperature, only warm hotend
        M140 S{BED_TEMP}
        M104 S{defaultWN} 
        G90 
        # Reset the G-Code Z offset
        SET_GCODE_OFFSET Z=0.0
        M117 Bringing bed to temperature.
        M190 S{BED_TEMP}
        _HEAT_WAIT MINUTES={printer["gcode_macro configvars"].insitumeshsoakminutes|float}
        SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
        M401
        QUAD_GANTRY_LEVEL_ORIGINIAL
        G28 Z
        BED_MESH_CALIBRATE_ORIGINIAL
        BED_MESH_PROFILE SAVE=INSITUMESH
        BED_MESH_OUTPUT PGP=1
        M118 INSITU Bed mesh calibration completed and applied.
        SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2



#.................................................................................................................
[gcode_macro PRINT_START]
gcode:
    CLEAR_PAUSE
    BED_MESH_CLEAR
    SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
    {% set defaultTN = printer["gcode_macro configvars"].defaulttempnozzle|float %}
    {% set defaultWN = printer["gcode_macro configvars"].defaultwarmnozzle|float %}
    {% set purgeRetract = printer["gcode_macro configvars"].purgeretract|float %}
    {% set defaultTB = printer["gcode_macro configvars"].defaulttempbed|float %}
    {% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(defaultTN)|float %}
    {% set NZLD = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}  
    # Bring bed to full temperature, only warm hotend
    M140 S{BED_TEMP}
    M104 S{defaultWN}
    G90
    # Reset the G-Code Z offset
    SET_GCODE_OFFSET Z=0.0
    M117 Performing initial homing.
        {% if printer["gcode_macro configvars"].qglbeforesoakprint|default() == true %}
            G32
            # Move the nozzle
            G1 X0 Y20 Z25 F3000
          {% else %}
            G28
            # Not moving the probe if QGL was not peroformed
        {% endif %}
    M117 Bringing bed to temperature.
    SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
    SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
    M190 S{BED_TEMP}
    _HEAT_WAIT MINUTES={printer["gcode_macro configvars"].preprintsoakminutes|float}
    SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
    M117 Performing hot level.
    CURRENT_HIGH
    M400
    G3201
    M104 S{EXTRUDER_TEMP}
    G1 X0 Y20 F5000.0
    G1 Z0.5



    M117 Bringing nozzle to temperature.
    SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
    SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
    M109 S{EXTRUDER_TEMP}
    M117 Purging the extruder.
    SET_LED LED=nozzle RED=1 GREEN=0 BLUE=0
    # Purge line start
    G1 X0 Y19.8 Z0.3 F1500.0
    G1 E{(12.5 * NZLD)} F3600
    M400    
    G1 X0 Y0 Z0.3 F1500.0
    G1 X130 Y0.0 Z0.3 F1500.0 E{(37.5 * NZLD)}
    G1 X130 Y0.3 Z0.3 F5000.0
    G1 X010 Y0.3 Z0.3 F1500.0 E{(75.0 * NZLD)}
    M400
    G92 E0
    # Purge line completed, now retract is defined
    G1 E-{purgeRetract} F2000
    G1 Z5.0 F3000
    G1 X{X_MID} Y{Y_MID} F4000

    M117 Printing gcode file.
    SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=.5



#.................................................................................................................
[gcode_macro PRINT_END]
# Use PRINT_END for the slicer ending script
gcode:
    {% set EndRetract = printer["gcode_macro configvars"].endretract|float %}
    {% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}  
    {% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
    {% set Z_POS = printer.toolhead.position.z + 10 %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-{EndRetract} F3600        ; retract filament
    TURN_OFF_HEATERS
    CURRENT_NORMAL
    G91
    G0 Z5
    G90
    M400
    _COOL_WAIT MINUTES={printer["gcode_macro configvars"].postprintcool|float}
    _PARK_TOOLHEAD
    M18 X Y E
    M107                           ; turn off fan
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    _COOL_WAIT MINUTES={printer["gcode_macro configvars"].postprintparkcool|float}
    SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
    M117 Finished printing, check nozzle clear.
    M118 Finished printing, check nozzle clear.



#.................................................................................................................
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    {% set x = params.X|default(0) %}        #edit to your park position
    {% set y = params.Y|default(20) %}       #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{e} F2100
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
        G1 Z{z_safe}
        G90
        G1 X{x} Y{y} F6000
    {% else %}
        {action_respond_info("Printer not homed")}
    {% endif %}



#.................................................................................................................
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    {% set e = params.E|default(1) %} #edit to your retract length
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E{e} F2100
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}



#.................................................................................................................
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set EndRetract = printer["gcode_macro configvars"].endretract|float %}
    {% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}
    {% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
    {% set Z_POS = printer.toolhead.position.z + 10 %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-{EndRetract} F3600        ; retract filament
    CLEAR_PAUSE
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    CURRENT_NORMAL
    M106 S250
    G90
    _PARK_TOOLHEAD
    M18 X Y E
    M107                           ; turn off fan
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    _COOL_WAIT MINUTES={printer["gcode_macro configvars"].postprintparkcool|float}
    SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
    M117 Cancelled print, check nozzle clear.
    M118 Cancelled print, check nozzle clear.
    


#.................................................................................................................
[gcode_macro LOAD_FILAMENT]
gcode:
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
        {% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
           SAVE_GCODE_STATE NAME=HLF_state
            M83                       ; relative positioning on extruder    
            G0 X{X_MID} Y20 F3500     ; move to area where can easily load filament  
            G0 E50 F400               ; prime extruder
            G0 E50 F400               ; prime extruder
            G0 E50 F200               ; prime extruder
            G1 E-0.5 F1800            ; .5mm retraction
            G92 E0                    ; reset extruder
            M400
            RESTORE_GCODE_STATE NAME=HLF_state
        {% else %}
            {action_respond_info("Pause print first.")}
        {% endif %}
    {% else %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            M117 Performing required homing.
            G28
        {% endif %}
        {% set defaultTN = printer["gcode_macro configvars"].defaulttempnozzle|float %}
        {% set TEMP = params.TEMP|default(defaultTN)|float %}
        M117 Heating nozzle to LOAD filamnet.
        G90                       ; absolute positioning
        G0 X{X_MID} Y20 F3500     ; move to area where can easily load filament  
        M109 S{TEMP}              ; set hotend temperature and wait
        M83                       ; relative positioning on extruder    
        G0 E50 F400               ; prime extruder
        G0 E50 F400               ; prime extruder
        G0 E50 F200               ; prime extruder
        G1 E-0.5 F1800            ; .5mm retraction
        G92 E0                    ; reset extruder
        M400
        _PARK_TOOLHEAD
        M18 X Y E
        TURN_OFF_HEATERS
        M117 Finished filament load.
    {% endif %}



#.................................................................................................................
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
        {% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
            SAVE_GCODE_STATE NAME=HUF_state
            M83                       ; relative positioning on extruder    
            G0 X{X_MID} Y20 F3500     ; move to area where can easily load filament  
            G0 E-50 F1000             ; retract additional filament to move out of melt zone
            G0 E-50 F1000             ; retract additional filament to move out of melt zone
            G0 E-50 F1000             ; retract additional filament to move out of melt zone
            G0 E-50 F1000             ; retract additional filament to move out of melt zone
            G92 E0                    ; reset extruder
            M400
            RESTORE_GCODE_STATE NAME=HUF_state
        {% else %}
            {action_respond_info("Pause print first.")}
        {% endif %}
    {% else %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            M117 Performing required homing.
            G28
        {% endif %}
        {% set defaultTN = printer["gcode_macro configvars"].defaulttempnozzle|float %}
        {% set TEMP = params.TEMP|default(defaultTN)|float %}
        M117 Heating nozzle to UNLOAD filamnet.
        G90                       ; absolute positioning
        G0 X{X_MID} Y20 F3500     ; move to area where can easily load filament    
        M109 S{TEMP}              ; set hotend temperature and wait    
        M83                       ; relative positioning on extruder
        G0 E-50 F1000             ; retract additional filament to move out of melt zone
        G0 E-50 F1000             ; retract additional filament to move out of melt zone
        G0 E-50 F1000             ; retract additional filament to move out of melt zone
        G0 E-50 F1000             ; retract additional filament to move out of melt zone
        G92 E0                    ; reset extruder
        M400
        _PARK_TOOLHEAD
        M18 X Y E
        TURN_OFF_HEATERS
        M117 Finished filament unload.
    {% endif %}



#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Additional MACROS, creature comforts / non-essential but helpful
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

#.................................................................................................................


#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 40.931
#*# pid_ki = 1.451
#*# pid_kd = 288.563
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 35.304
#*# pid_ki = 5.740
#*# pid_kd = 54.280
#*#
#*# [stepper_z]
#*# position_endstop = 0.081
